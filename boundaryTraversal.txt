import java.util.Scanner;

class Node {
    int data;
    Node left, right;

    Node(int item) {
        data = item;
        left = right = null;
    }
}

class Main {
    Node root;

    void insert(Node node, int key) {
        if (key < node.data) {
            if (node.left != null) {
                insert(node.left, key);
            } else {
                System.out.println("Inserted " + key + " to the left of " + node.data);
                node.left = new Node(key);
            }
        } else if (key > node.data) {
            if (node.right != null) {
                insert(node.right, key);
            } else {
                System.out.println("Inserted " + key + " to the right of " + node.data);
                node.right = new Node(key);
            }
        }
    }

    // A simple function to print leaf nodes of a binary tree
    void printLeaves(Node node) {
        if (node == null)
            return;

        printLeaves(node.left);
        // Print it if it is a leaf node
        if (node.left == null && node.right == null)
            System.out.print(node.data + " ");
        printLeaves(node.right);
    }

    // A function to print all left boundary nodes, except a leaf node.
    // Print the nodes in TOP DOWN manner
    void printBoundaryLeft(Node node) {
        if (node == null)
            return;

        if (node.left != null) {
            // to ensure top down order, print the node
            // before calling itself for left subtree
            System.out.print(node.data + " ");
            printBoundaryLeft(node.left);
        } else if (node.right != null) {
            System.out.print(node.data + " ");
            printBoundaryLeft(node.right);
        }

        // do nothing if it is a leaf node, this way we avoid
        // duplicates in output
    }

    // A function to print all right boundary nodes, except a leaf node
    // Print the nodes in BOTTOM UP manner
    void printBoundaryRight(Node node) {
        if (node == null)
            return;

        if (node.right != null) {
            // to ensure bottom up order, first call for right
            // subtree, then print this node
            printBoundaryRight(node.right);
            System.out.print(node.data + " ");
        } else if (node.left != null) {
            printBoundaryRight(node.left);
            System.out.print(node.data + " ");
        }
        // do nothing if it is a leaf node, this way we avoid
        // duplicates in output
    }

    // A function to do boundary traversal of a given binary tree
    void printBoundary(Node node) {
        if (node == null)
            return;

        System.out.print(node.data + " ");

        // Print the left boundary in top-down manner.
        printBoundaryLeft(node.left);

        // Print all leaf nodes
        printLeaves(node.left);
        printLeaves(node.right);

        // Print the right boundary in bottom-up manner
        printBoundaryRight(node.right);
    }

    // Driver program to test above functions
    public static void main(String args[]) {
        Main tree = new Main();
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter the root value: ");
        int rootValue = scanner.nextInt();
        tree.root = new Node(rootValue);

        while (true) {
            System.out.print("Enter node value to insert (or -1 to stop): ");
            int value = scanner.nextInt();
            if (value == -1) break;
            tree.insert(tree.root, value);
        }

        System.out.println("\nBoundary Traversal:");
        tree.printBoundary(tree.root);

        scanner.close();
    }
}
__